"use strict";(self.webpackChunknour_api_docs=self.webpackChunknour_api_docs||[]).push([[4224],{2215:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"responses","title":"HTTP Responses","description":"*   Creating Responses","source":"@site/docs/responses.md","sourceDirName":".","slug":"/responses","permalink":"/v2/docs/responses","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Requests","permalink":"/v2/docs/requests"},"next":{"title":"Authentication","permalink":"/v2/docs/authentication"}}');var r=s(4848),t=s(8453);const a={},i="HTTP Responses",l={},c=[{value:"Creating Responses",id:"creating-responses",level:2},{value:"Strings &amp; Arrays",id:"strings--arrays",level:4},{value:"Response Objects",id:"response-objects",level:4},{value:"Attaching Headers To Responses",id:"attaching-headers-to-responses",level:3},{value:"Attaching Cookies To Responses",id:"attaching-cookies-to-responses",level:3},{value:"Other Response Types",id:"other-response-types",level:2},{value:"JSON Responses",id:"json-responses",level:3},{value:"File Downloads",id:"file-downloads",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"http-responses",children:"HTTP Responses"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#creating-responses",children:"Creating Responses"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#attaching-headers-to-responses",children:"Attaching Headers To Responses"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#attaching-cookies-to-responses",children:"Attaching Cookies To Responses"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#other-response-types",children:"Other Response Types"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#json-responses",children:"JSON Responses"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#file-downloads",children:"File Downloads"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"creating-responses",children:"Creating Responses"}),"\n",(0,r.jsx)(n.h4,{id:"strings--arrays",children:"Strings & Arrays"}),"\n",(0,r.jsx)(n.p,{children:"All routes and controllers should return a response to be sent back to the user's browser. Nour-API provides several different ways to return responses. The most basic response is simply returning a string from a route or controller. The framework will automatically convert the string into a full HTTP response:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$router->get('/', function () {\n    return 'Hello World';\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"In addition to returning strings from your routes and controllers, you may also return arrays. The framework will automatically convert the array into a JSON response:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$router->get('/', function () {\n    return [1, 2, 3];\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"response-objects",children:"Response Objects"}),"\n",(0,r.jsxs)(n.p,{children:["Typically, you won't just be returning simple strings or arrays from your route actions. Instead, you will be returning full ",(0,r.jsx)(n.code,{children:"Illuminate\\Http\\Response"})," instances or views."]}),"\n",(0,r.jsxs)(n.p,{children:["Returning a full ",(0,r.jsx)(n.code,{children:"Response"})," instance allows you to customize the response's HTTP status code and headers. A ",(0,r.jsx)(n.code,{children:"Response"})," instance inherits from the ",(0,r.jsx)(n.code,{children:"Symfony\\Component\\HttpFoundation\\Response"})," class, which provides a variety of methods for building HTTP responses:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Illuminate\\Http\\Response;\n\n$router->get('home', function () {\n    return (new Response($content, $status))\n                  ->header('Content-Type', $value);\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For convenience, you may also use the ",(0,r.jsx)(n.code,{children:"response"})," helper:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$router->get('home', function () {\n    return response($content, $status)\n                  ->header('Content-Type', $value);\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"attaching-headers-to-responses",children:"Attaching Headers To Responses"}),"\n",(0,r.jsxs)(n.p,{children:["Keep in mind that most response methods are chainable, allowing for the fluent building of responses. For example, you may use the ",(0,r.jsx)(n.code,{children:"header"})," method to add a series of headers to the response before sending it back to the user:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"return response($content)\n            ->header('Content-Type', $type)\n            ->header('X-Header-One', 'Header Value')\n            ->header('X-Header-Two', 'Header Value');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Or, you may use the ",(0,r.jsx)(n.code,{children:"withHeaders"})," method to specify an array of headers to be added to the response:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"return response($content)\n            ->withHeaders([\n                'Content-Type' => $type,\n                'X-Header-One' => 'Header Value',\n                'X-Header-Two' => 'Header Value',\n            ]);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"attaching-cookies-to-responses",children:"Attaching Cookies To Responses"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"cookie"})," helper method allows you to easily attach cookies to your responses. For example, you may use the ",(0,r.jsx)(n.code,{children:"cookie"})," method to generate a cookie and attach it to the response instance:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"return response($content)->cookie(\n    'name', 'value', $minutes\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"cookie"})," method also accepts a few more arguments which are used less frequently. Generally, these arguments have the same purpose and meaning as the arguments that would be given to PHP's native ",(0,r.jsx)(n.a,{href:"https://secure.php.net/manual/en/function.setcookie.php",children:"setcookie"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"return response($content)->cookie(\n    'name', 'value', $minutes, $path, $domain, $secure, $httpOnly\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"other-response-types",children:"Other Response Types"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"response"})," helper may be used to conveniently generate other types of response instances. When the ",(0,r.jsx)(n.code,{children:"response"})," helper is called without arguments, an implementation of the ",(0,r.jsx)(n.code,{children:"Illuminate\\Contracts\\Routing\\ResponseFactory"})," contract is returned. This contract provides several helpful methods for generating responses."]}),"\n",(0,r.jsx)(n.h3,{id:"json-responses",children:"JSON Responses"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"json"})," method will automatically set the ",(0,r.jsx)(n.code,{children:"Content-Type"})," header to ",(0,r.jsx)(n.code,{children:"application/json"}),", as well as convert the given array to JSON using the ",(0,r.jsx)(n.code,{children:"json_encode"})," PHP function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"return response()->json(['name' => 'Abigail', 'state' => 'CA']);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you would like to create a JSONP response, you may use the ",(0,r.jsx)(n.code,{children:"json"})," method in combination with the ",(0,r.jsx)(n.code,{children:"setCallback"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"return response()->json(['name' => 'Abigail', 'state' => 'CA'])\n                 ->setCallback($request->input('callback'));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"file-downloads",children:"File Downloads"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"download"})," method may be used to generate a response that forces the user's browser to download the file at the given path. The ",(0,r.jsx)(n.code,{children:"download"})," method accepts a file name as the second argument to the method, which will determine the file name that is seen by the user downloading the file. Finally, you may pass an array of HTTP headers as the third argument to the method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"return response()->download($pathToFile);\n\nreturn response()->download($pathToFile, $name, $headers);\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Symfony HttpFoundation, which manages file downloads, requires the file being downloaded to have an ASCII file name."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var o=s(6540);const r={},t=o.createContext(r);function a(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);