"use strict";(self.webpackChunknour_api_docs=self.webpackChunknour_api_docs||[]).push([[1831],{5159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"authentication","title":"Authentication","description":"*   Introduction","source":"@site/docs/authentication.md","sourceDirName":".","slug":"/authentication","permalink":"/v2/docs/authentication","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Responses","permalink":"/v2/docs/responses"},"next":{"title":"Authorization","permalink":"/v2/docs/authorization"}}');var s=t(4848),r=t(8453);const a={},o="Authentication",c={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Authenticating Users",id:"authenticating-users",level:2},{value:"Basic Authentication",id:"basic-authentication",level:3},{value:"Token Authentication",id:"token-authentication",level:3},{value:"Custom Authentication",id:"custom-authentication",level:3},{value:"Protecting Routes",id:"protecting-routes",level:2},{value:"Accessing the Authenticated User",id:"accessing-the-authenticated-user",level:3},{value:"Determining If The Current User Is Authenticated",id:"determining-if-the-current-user-is-authenticated",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"authentication",children:"Authentication"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#configuration",children:"Configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#authenticating-users",children:"Authenticating Users"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#protecting-routes",children:"Protecting Routes"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"Nour-API provides a simple, token-based authentication system. Since Nour-API is stateless, it does not support session-based authentication like the full Laravel framework. Instead, authentication is typically handled using API tokens or headers."}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Before using Nour-API's authentication features, you need to configure the authentication service provider. In your ",(0,s.jsx)(n.code,{children:"bootstrap/app.php"})," file, you should uncomment the following line:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$app->register(App\\Providers\\AuthServiceProvider::class);\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should also uncomment the authentication middleware:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$app->routeMiddleware([\n    'auth' => App\\Http\\Middleware\\Authenticate::class,\n]);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"authenticating-users",children:"Authenticating Users"}),"\n",(0,s.jsx)(n.h3,{id:"basic-authentication",children:"Basic Authentication"}),"\n",(0,s.jsxs)(n.p,{children:["Nour-API includes a built-in authentication guard that will validate API tokens. To use this guard, you need to set the ",(0,s.jsx)(n.code,{children:"auth.defaults.guard"})," configuration option to ",(0,s.jsx)(n.code,{children:"api"})," in your ",(0,s.jsx)(n.code,{children:"config/auth.php"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"'defaults' => [\n    'guard' => 'api',\n    'passwords' => 'users',\n],\n\n'guards' => [\n    'api' => [\n        'driver' => 'token',\n        'provider' => 'users',\n    ],\n],\n"})}),"\n",(0,s.jsx)(n.h3,{id:"token-authentication",children:"Token Authentication"}),"\n",(0,s.jsx)(n.p,{children:"The most common authentication method for APIs is token-based authentication. Here's how you can implement it:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Add an API token column to your users table:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"Schema::table('users', function ($table) {\n    $table->string('api_token', 60)->unique()->nullable();\n});\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Generate tokens for your users:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$user = User::find(1);\n$user->api_token = str_random(60);\n$user->save();\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Configure the token guard in your AuthServiceProvider:"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function boot()\n{\n    $this->app['auth']->viaRequest('api', function ($request) {\n        if ($request->input('api_token')) {\n            return User::where('api_token', $request->input('api_token'))->first();\n        }\n    });\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-authentication",children:"Custom Authentication"}),"\n",(0,s.jsx)(n.p,{children:"You can also implement custom authentication logic by defining your own authentication guard:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function boot()\n{\n    $this->app['auth']->viaRequest('api', function ($request) {\n        // Custom authentication logic\n        $token = $request->header('Authorization');\n        \n        if ($token) {\n            // Remove 'Bearer ' prefix if present\n            $token = str_replace('Bearer ', '', $token);\n            return User::where('api_token', $token)->first();\n        }\n    });\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"protecting-routes",children:"Protecting Routes"}),"\n",(0,s.jsxs)(n.p,{children:["Once you have configured authentication, you can protect your routes using the ",(0,s.jsx)(n.code,{children:"auth"})," middleware:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$router->get('profile', ['middleware' => 'auth', function () {\n    // Only authenticated users may enter...\n}]);\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also protect controller actions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$router->get('profile', [\n    'middleware' => 'auth',\n    'uses' => 'UserController@showProfile'\n]);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"accessing-the-authenticated-user",children:"Accessing the Authenticated User"}),"\n",(0,s.jsxs)(n.p,{children:["Once a user is authenticated, you can access the authenticated user via the ",(0,s.jsx)(n.code,{children:"Auth"})," facade:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Illuminate\\Support\\Facades\\Auth;\n\n$user = Auth::user();\n"})}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, you can access the authenticated user via the request instance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Illuminate\\Http\\Request;\n\npublic function profile(Request $request)\n{\n    $user = $request->user();\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"determining-if-the-current-user-is-authenticated",children:"Determining If The Current User Is Authenticated"}),"\n",(0,s.jsxs)(n.p,{children:["To determine if the user is already logged in, you may use the ",(0,s.jsx)(n.code,{children:"check"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Illuminate\\Support\\Facades\\Auth;\n\nif (Auth::check()) {\n    // The user is logged in...\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);