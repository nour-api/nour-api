"use strict";(self.webpackChunknour_api_docs=self.webpackChunknour_api_docs||[]).push([[5075],{8141:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"cache","title":"Cache","description":"*   Configuration","source":"@site/docs/cache.md","sourceDirName":".","slug":"/cache","permalink":"/v2/docs/cache","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Authorization","permalink":"/v2/docs/authorization"},"next":{"title":"Database: Getting Started","permalink":"/v2/docs/database"}}');var c=t(4848),s=t(8453);const r={},a="Cache",h={},o=[{value:"Configuration",id:"configuration",level:2},{value:"Cache Prerequisites",id:"cache-prerequisites",level:3},{value:"Database",id:"database",level:4},{value:"Memcached",id:"memcached",level:4},{value:"Redis",id:"redis",level:4},{value:"Cache Usage",id:"cache-usage",level:2},{value:"Obtaining A Cache Instance",id:"obtaining-a-cache-instance",level:3},{value:"Accessing Multiple Cache Stores",id:"accessing-multiple-cache-stores",level:4},{value:"Retrieving Items From The Cache",id:"retrieving-items-from-the-cache",level:3},{value:"Checking For Item Existence",id:"checking-for-item-existence",level:4},{value:"Incrementing / Decrementing Values",id:"incrementing--decrementing-values",level:4},{value:"Retrieve &amp; Store",id:"retrieve--store",level:4},{value:"Retrieve &amp; Delete",id:"retrieve--delete",level:4},{value:"Storing Items In The Cache",id:"storing-items-in-the-cache",level:3},{value:"Store If Not Present",id:"store-if-not-present",level:4},{value:"Storing Items Forever",id:"storing-items-forever",level:4},{value:"Removing Items From The Cache",id:"removing-items-from-the-cache",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"cache",children:"Cache"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"#configuration",children:"Configuration"})}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.a,{href:"#cache-usage",children:"Cache Usage"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"#obtaining-a-cache-instance",children:"Obtaining A Cache Instance"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"#retrieving-items-from-the-cache",children:"Retrieving Items From The Cache"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"#storing-items-in-the-cache",children:"Storing Items In The Cache"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"#removing-items-from-the-cache",children:"Removing Items From The Cache"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,c.jsxs)(n.p,{children:["Nour-API provides a unified API for various caching systems. The cache configuration is located in the ",(0,c.jsx)(n.code,{children:"config/cache.php"})," file. In this file you may specify which cache driver you would like used by default throughout your application. Nour-API supports popular caching backends like ",(0,c.jsx)(n.a,{href:"https://memcached.org",children:"Memcached"})," and ",(0,c.jsx)(n.a,{href:"https://redis.io",children:"Redis"})," out of the box."]}),"\n",(0,c.jsxs)(n.p,{children:["The cache configuration file also contains various other options, which are documented within the file, so make sure to read over these options. By default, Nour-API is configured to use the ",(0,c.jsx)(n.code,{children:"file"})," cache driver, which stores the serialized, cached objects in the filesystem. For larger applications, it is recommended that you use a more robust driver such as Memcached or Redis. You may even configure multiple cache configurations for the same driver."]}),"\n",(0,c.jsx)(n.h3,{id:"cache-prerequisites",children:"Cache Prerequisites"}),"\n",(0,c.jsx)(n.h4,{id:"database",children:"Database"}),"\n",(0,c.jsxs)(n.p,{children:["When using the ",(0,c.jsx)(n.code,{children:"database"})," cache driver, you will need to setup a table to contain the cache items. You'll find an example ",(0,c.jsx)(n.code,{children:"Schema"})," declaration for the table below:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"Schema::create('cache', function ($table) {\n    $table->string('key')->unique();\n    $table->mediumText('value');\n    $table->integer('expiration');\n});\n"})}),"\n",(0,c.jsx)(n.h4,{id:"memcached",children:"Memcached"}),"\n",(0,c.jsxs)(n.p,{children:["Using the Memcached driver requires the ",(0,c.jsx)(n.a,{href:"https://pecl.php.net/package/memcached",children:"Memcached PECL package"})," to be installed. You may list all of your Memcached servers in the ",(0,c.jsx)(n.code,{children:"config/cache.php"})," configuration file:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"'memcached' => [\n    [\n        'host' => '127.0.0.1',\n        'port' => 11211,\n        'weight' => 100\n    ],\n],\n"})}),"\n",(0,c.jsx)(n.h4,{id:"redis",children:"Redis"}),"\n",(0,c.jsxs)(n.p,{children:["Before using a Redis cache with Nour-API, you will need to either install the PhpRedis PHP extension via PECL or install the ",(0,c.jsx)(n.code,{children:"predis/predis"})," package (~1.0) via Composer."]}),"\n",(0,c.jsx)(n.h2,{id:"cache-usage",children:"Cache Usage"}),"\n",(0,c.jsx)(n.h3,{id:"obtaining-a-cache-instance",children:"Obtaining A Cache Instance"}),"\n",(0,c.jsxs)(n.p,{children:["To obtain a cache store instance, you may use the ",(0,c.jsx)(n.code,{children:"Cache"})," facade, which is what we will use throughout this documentation. The ",(0,c.jsx)(n.code,{children:"Cache"})," facade provides convenient, terse access to the underlying implementations of the Nour-API cache contracts:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass UserController extends Controller\n{\n    /**\n     * Show a list of all users of the application.\n     *\n     * @return Response\n     */\n    public function index()\n    {\n        $value = Cache::get('key');\n\n        //\n    }\n}\n"})}),"\n",(0,c.jsx)(n.h4,{id:"accessing-multiple-cache-stores",children:"Accessing Multiple Cache Stores"}),"\n",(0,c.jsxs)(n.p,{children:["Using the ",(0,c.jsx)(n.code,{children:"Cache"})," facade, you may access various cache stores via the ",(0,c.jsx)(n.code,{children:"store"})," method. The key passed to the ",(0,c.jsx)(n.code,{children:"store"})," method should correspond to one of the stores listed in the ",(0,c.jsx)(n.code,{children:"stores"})," configuration array in your ",(0,c.jsx)(n.code,{children:"cache"})," configuration file:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"$value = Cache::store('file')->get('foo');\n\nCache::store('redis')->put('bar', 'baz', 10);\n"})}),"\n",(0,c.jsx)(n.h3,{id:"retrieving-items-from-the-cache",children:"Retrieving Items From The Cache"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"get"})," method on the ",(0,c.jsx)(n.code,{children:"Cache"})," facade is used to retrieve items from the cache. If the item does not exist in the cache, ",(0,c.jsx)(n.code,{children:"null"})," will be returned. If you wish, you may pass a second argument to the ",(0,c.jsx)(n.code,{children:"get"})," method specifying the default value you wish to be returned if the item doesn't exist:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"$value = Cache::get('key');\n\n$value = Cache::get('key', 'default');\n"})}),"\n",(0,c.jsxs)(n.p,{children:["You may even pass a ",(0,c.jsx)(n.code,{children:"Closure"})," as the default value. The result of the ",(0,c.jsx)(n.code,{children:"Closure"})," will be returned if the specified item does not exist in the cache. Passing a Closure allows you to defer the retrieval of default values from a database or other external service:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"$value = Cache::get('key', function () {\n    return DB::table(...)->get();\n});\n"})}),"\n",(0,c.jsx)(n.h4,{id:"checking-for-item-existence",children:"Checking For Item Existence"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"has"})," method may be used to determine if an item exists in the cache. This method will return ",(0,c.jsx)(n.code,{children:"false"})," if the value is ",(0,c.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"if (Cache::has('key')) {\n    //\n}\n"})}),"\n",(0,c.jsx)(n.h4,{id:"incrementing--decrementing-values",children:"Incrementing / Decrementing Values"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"increment"})," and ",(0,c.jsx)(n.code,{children:"decrement"})," methods may be used to adjust the value of integer items in the cache. Both of these methods accept an optional second argument indicating the amount by which to increment or decrement the item's value:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"Cache::increment('key');\nCache::increment('key', $amount);\nCache::decrement('key');\nCache::decrement('key', $amount);\n"})}),"\n",(0,c.jsx)(n.h4,{id:"retrieve--store",children:"Retrieve & Store"}),"\n",(0,c.jsxs)(n.p,{children:["Sometimes you may wish to retrieve an item from the cache, but also store a default value if the requested item doesn't exist. For example, you may wish to retrieve all users from the cache or, if they don't exist, retrieve them from the database and add them to the cache. You may do this using the ",(0,c.jsx)(n.code,{children:"Cache::remember"})," method:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"$value = Cache::remember('users', $seconds, function () {\n    return DB::table('users')->get();\n});\n"})}),"\n",(0,c.jsxs)(n.p,{children:["If the item does not exist in the cache, the ",(0,c.jsx)(n.code,{children:"Closure"})," passed to the ",(0,c.jsx)(n.code,{children:"remember"})," method will be executed and its result will be placed in the cache."]}),"\n",(0,c.jsxs)(n.p,{children:["You may use the ",(0,c.jsx)(n.code,{children:"rememberForever"})," method to retrieve an item from the cache or store it forever:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"$value = Cache::rememberForever('users', function () {\n    return DB::table('users')->get();\n});\n"})}),"\n",(0,c.jsx)(n.h4,{id:"retrieve--delete",children:"Retrieve & Delete"}),"\n",(0,c.jsxs)(n.p,{children:["If you need to retrieve an item from the cache and then delete the item, you may use the ",(0,c.jsx)(n.code,{children:"pull"})," method. Like the ",(0,c.jsx)(n.code,{children:"get"})," method, ",(0,c.jsx)(n.code,{children:"null"})," will be returned if the item does not exist in the cache:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"$value = Cache::pull('key');\n"})}),"\n",(0,c.jsx)(n.h3,{id:"storing-items-in-the-cache",children:"Storing Items In The Cache"}),"\n",(0,c.jsxs)(n.p,{children:["You may use the ",(0,c.jsx)(n.code,{children:"put"})," method on the ",(0,c.jsx)(n.code,{children:"Cache"})," facade to store items in the cache:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"Cache::put('key', 'value', $seconds);\n"})}),"\n",(0,c.jsxs)(n.p,{children:["If the storage time is not passed to the ",(0,c.jsx)(n.code,{children:"put"})," method, the item will be stored indefinitely:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"Cache::put('key', 'value');\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Instead of passing the number of seconds as an integer, you may also pass a ",(0,c.jsx)(n.code,{children:"DateTime"})," instance representing the expiration time of the cached item:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"Cache::put('key', 'value', now()->addMinutes(10));\n"})}),"\n",(0,c.jsx)(n.h4,{id:"store-if-not-present",children:"Store If Not Present"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"add"})," method will only add the item to the cache if it does not already exist in the cache store. The method will return ",(0,c.jsx)(n.code,{children:"true"})," if the item is actually added to the cache. Otherwise, the method will return ",(0,c.jsx)(n.code,{children:"false"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"Cache::add('key', 'value', $seconds);\n"})}),"\n",(0,c.jsx)(n.h4,{id:"storing-items-forever",children:"Storing Items Forever"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"forever"})," method may be used to store an item in the cache permanently. Since these items will not expire, they must be manually removed from the cache using the ",(0,c.jsx)(n.code,{children:"forget"})," method:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"Cache::forever('key', 'value');\n"})}),"\n",(0,c.jsx)(n.h3,{id:"removing-items-from-the-cache",children:"Removing Items From The Cache"}),"\n",(0,c.jsxs)(n.p,{children:["You may remove items from the cache using the ",(0,c.jsx)(n.code,{children:"forget"})," method:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"Cache::forget('key');\n"})}),"\n",(0,c.jsxs)(n.p,{children:["You may clear the entire cache using the ",(0,c.jsx)(n.code,{children:"flush"})," method:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"Cache::flush();\n"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Note:"})," Flushing the cache does not respect the cache prefix and will remove all entries from the cache. Consider this carefully when clearing a cache which is shared by other applications."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const c={},s=i.createContext(c);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);