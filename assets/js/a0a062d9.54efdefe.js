"use strict";(self.webpackChunknour_api_docs=self.webpackChunknour_api_docs||[]).push([[590],{1693:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"authorization","title":"Authorization","description":"*   Introduction","source":"@site/docs/authorization.md","sourceDirName":".","slug":"/authorization","permalink":"/docs/authorization","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Authentication","permalink":"/docs/authentication"},"next":{"title":"Cache","permalink":"/docs/cache"}}');var o=n(4848),s=n(8453);const r={},a="Authorization",c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Gates",id:"gates",level:2},{value:"Writing Gates",id:"writing-gates",level:3},{value:"Authorizing Actions",id:"authorizing-actions",level:3},{value:"Policies",id:"policies",level:2},{value:"Creating Policies",id:"creating-policies",level:3},{value:"Writing Policies",id:"writing-policies",level:3},{value:"Authorizing Actions Using Policies",id:"authorizing-actions-using-policies",level:3}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"authorization",children:"Authorization"})}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.a,{href:"#gates",children:"Gates"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"#writing-gates",children:"Writing Gates"})}),"\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"#authorizing-actions",children:"Authorizing Actions"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.a,{href:"#policies",children:"Policies"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"#creating-policies",children:"Creating Policies"})}),"\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"#writing-policies",children:"Writing Policies"})}),"\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"#authorizing-actions-using-policies",children:"Authorizing Actions Using Policies"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(i.p,{children:"In addition to providing authentication services out of the box, Nour-API also provides a simple way to authorize user actions against a given resource. For example, even though a user is authenticated, they may not be authorized to update a given Eloquent model. Nour-API provides two primary ways to authorize actions: gates and policies."}),"\n",(0,o.jsx)(i.p,{children:"Think of gates and policies like routes and controllers. Gates provide a simple, Closure-based approach to authorization while policies, like controllers, group logic around a particular model or resource. We'll explore gates first and then examine policies."}),"\n",(0,o.jsx)(i.h2,{id:"gates",children:"Gates"}),"\n",(0,o.jsx)(i.h3,{id:"writing-gates",children:"Writing Gates"}),"\n",(0,o.jsxs)(i.p,{children:["Gates are simply Closures that determine if a user is authorized to perform a given action. Typically, gates are defined in the ",(0,o.jsx)(i.code,{children:"AuthServiceProvider"})," using the ",(0,o.jsx)(i.code,{children:"Gate"})," facade. Gates always receive a user instance as their first argument, and may optionally receive additional arguments such as a relevant Eloquent model:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:'<?php\n\nnamespace App\\Providers;\n\nuse App\\User;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        //\n    }\n\n    /**\n     * Boot the authentication services for the application.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        // Here you may define how you wish users to be authenticated for your Lumen\n        // application. The callback which receives the incoming request instance\n        // should return either a User instance or null. You\'re free to obtain\n        // the User instance via an API token or any other method necessary.\n\n        $this->app["auth"]->viaRequest("api", function ($request) {\n            if ($request->input("api_token")) {\n                return User::where("api_token", $request->input("api_token"))->first();\n            }\n        });\n\n        Gate::define("update-post", function ($user, $post) {\n            return $user->id === $post->user_id;\n        });\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"authorizing-actions",children:"Authorizing Actions"}),"\n",(0,o.jsxs)(i.p,{children:["To authorize an action using gates, you should use the ",(0,o.jsx)(i.code,{children:"allows"})," or ",(0,o.jsx)(i.code,{children:"denies"})," methods on the ",(0,o.jsx)(i.code,{children:"Gate"})," facade. Note that you are not required to pass the currently authenticated user to these methods. Nour-API will automatically take care of passing the user into the gate Closure:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:'if (Gate::allows("update-post", $post)) {\n    // The user can update the post...\n}\n\nif (Gate::denies("update-post", $post)) {\n    // The user can not update the post...\n}\n'})}),"\n",(0,o.jsxs)(i.p,{children:["If you would like to authorize an action for a user that is not the currently authenticated user, you may use the ",(0,o.jsx)(i.code,{children:"forUser"})," method on the ",(0,o.jsx)(i.code,{children:"Gate"})," facade:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:'if (Gate::forUser($user)->allows("update-post", $post)) {\n    //\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"policies",children:"Policies"}),"\n",(0,o.jsx)(i.h3,{id:"creating-policies",children:"Creating Policies"}),"\n",(0,o.jsxs)(i.p,{children:["Policies are classes that organize authorization logic around a particular model or resource. For example, if your application is a blog, you may have a ",(0,o.jsx)(i.code,{children:"Post"})," model and a corresponding ",(0,o.jsx)(i.code,{children:"PostPolicy"})," to authorize user actions for creating or updating posts."]}),"\n",(0,o.jsx)(i.h3,{id:"writing-policies",children:"Writing Policies"}),"\n",(0,o.jsxs)(i.p,{children:["Once the policy class has been generated, we need to add methods for each action it authorizes. For example, let's define an ",(0,o.jsx)(i.code,{children:"update"})," method on our ",(0,o.jsx)(i.code,{children:"PostPolicy"})," which determines if a given ",(0,o.jsx)(i.code,{children:"User"})," can update a given ",(0,o.jsx)(i.code,{children:"Post"})," instance."]}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"update"})," method will receive a ",(0,o.jsx)(i.code,{children:"User"})," and a ",(0,o.jsx)(i.code,{children:"Post"})," instance as its arguments, and should return ",(0,o.jsx)(i.code,{children:"true"})," or ",(0,o.jsx)(i.code,{children:"false"})," indicating whether the user is authorized to update the given ",(0,o.jsx)(i.code,{children:"Post"}),". So, for this example, we will verify that the user's ",(0,o.jsx)(i.code,{children:"id"})," matches the ",(0,o.jsx)(i.code,{children:"user_id"})," on the post:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:"<?php\n\nnamespace App\\Policies;\n\nuse App\\User;\nuse App\\Post;\n\nclass PostPolicy\n{\n    /**\n     * Determine if the given post can be updated by the user.\n     *\n     * @param  \\App\\User  $user\n     * @param  \\App\\Post  $post\n     * @return bool\n     */\n    public function update(User $user, Post $post)\n    {\n        return $user->id === $post->user_id;\n    }\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"authorizing-actions-using-policies",children:"Authorizing Actions Using Policies"}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"Gate"})," facade's ",(0,o.jsx)(i.code,{children:"allows"})," and ",(0,o.jsx)(i.code,{children:"denies"})," methods can be used to authorize actions using policies. For example, let's say we have a ",(0,o.jsx)(i.code,{children:"Post"})," model and a corresponding ",(0,o.jsx)(i.code,{children:"PostPolicy"}),". We can authorize a user to update a post like so:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:'if (Gate::allows("update", $post)) {\n    //\n}\n'})}),"\n",(0,o.jsxs)(i.p,{children:["Nour-API will automatically discover the ",(0,o.jsx)(i.code,{children:"PostPolicy"})," and call the ",(0,o.jsx)(i.code,{children:"update"})," method on the policy, passing the currently authenticated user and the ",(0,o.jsx)(i.code,{children:"Post"})," instance."]}),"\n",(0,o.jsxs)(i.p,{children:["If the policy for a given model is not found, Nour-API will attempt to call a gate with the same name as the policy method. For example, if a policy for the ",(0,o.jsx)(i.code,{children:"Post"})," model is not found, Nour-API will attempt to call the ",(0,o.jsx)(i.code,{children:"update-post"})," gate."]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>a});var t=n(6540);const o={},s=t.createContext(o);function r(e){const i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);