"use strict";(self.webpackChunknour_api_docs=self.webpackChunknour_api_docs||[]).push([[268],{944:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"routing","title":"HTTP Routing","description":"*   Basic Routing","source":"@site/docs/routing.md","sourceDirName":".","slug":"/routing","permalink":"/docs/routing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Upgrade Guide","permalink":"/docs/upgrade"},"next":{"title":"HTTP Middleware","permalink":"/docs/middleware"}}');var t=n(4848),s=n(8453);const a={},i="HTTP Routing",l={},u=[{value:"Basic Routing",id:"basic-routing",level:2},{value:"Available Router Methods",id:"available-router-methods",level:4},{value:"Route Parameters",id:"route-parameters",level:2},{value:"Required Parameters",id:"required-parameters",level:3},{value:"Optional Parameters",id:"optional-parameters",level:3},{value:"Regular Expression Constraints",id:"regular-expression-constraints",level:3},{value:"Named Routes",id:"named-routes",level:2},{value:"Generating URLs To Named Routes",id:"generating-urls-to-named-routes",level:4},{value:"Route Groups",id:"route-groups",level:2},{value:"Middleware",id:"middleware",level:3},{value:"Namespaces",id:"namespaces",level:3},{value:"Route Prefixes",id:"route-prefixes",level:3}];function c(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"http-routing",children:"HTTP Routing"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#basic-routing",children:"Basic Routing"})}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"#route-parameters",children:"Route Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#required-parameters",children:"Required Parameters"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#optional-parameters",children:"Optional Parameters"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#regular-expression-constraints",children:"Regular Expression Constraints"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#named-routes",children:"Named Routes"})}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"#route-groups",children:"Route Groups"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#middleware",children:"Middleware"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#namespaces",children:"Namespaces"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"#route-prefixes",children:"Route Prefixes"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"basic-routing",children:"Basic Routing"}),"\n",(0,t.jsxs)(r.p,{children:["You will define all of the routes for your application in the ",(0,t.jsx)(r.code,{children:"routes/web.php"})," file. The most basic Nour-API routes simply accept a URI and a ",(0,t.jsx)(r.code,{children:"Closure"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->get('foo', function () {\n    return 'Hello World';\n});\n\n$router->post('foo', function () {\n    //\n});\n"})}),"\n",(0,t.jsx)(r.h4,{id:"available-router-methods",children:"Available Router Methods"}),"\n",(0,t.jsx)(r.p,{children:"The router allows you to register routes that respond to any HTTP verb:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->get($uri, $callback);\n$router->post($uri, $callback);\n$router->put($uri, $callback);\n$router->patch($uri, $callback);\n$router->delete($uri, $callback);\n$router->options($uri, $callback);\n"})}),"\n",(0,t.jsx)(r.h2,{id:"route-parameters",children:"Route Parameters"}),"\n",(0,t.jsx)(r.h3,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,t.jsx)(r.p,{children:"Of course, sometimes you will need to capture segments of the URI within your route. For example, you may need to capture a user's ID from the URL. You may do so by defining route parameters:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->get('user/{id}', function ($id) {\n    return 'User '.$id;\n});\n"})}),"\n",(0,t.jsx)(r.p,{children:"You may define as many route parameters as required by your route:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->get('posts/{postId}/comments/{commentId}', function ($postId, $commentId) {\n    //\n});\n"})}),"\n",(0,t.jsxs)(r.p,{children:['Route parameters are always encased within "curly" braces. The parameters will be passed into your route\'s ',(0,t.jsx)(r.code,{children:"Closure"})," when the route is executed."]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Note:"})," Route parameters cannot contain the ",(0,t.jsx)(r.code,{children:"-"})," character. Use an underscore (",(0,t.jsx)(r.code,{children:"_"}),") instead."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"optional-parameters",children:"Optional Parameters"}),"\n",(0,t.jsxs)(r.p,{children:["You may define optional route parameters by enclosing part of the route URI definition in ",(0,t.jsx)(r.code,{children:"[...]"}),". So, for example, ",(0,t.jsx)(r.code,{children:"/foo[bar]"})," will match both ",(0,t.jsx)(r.code,{children:"/foo"})," and ",(0,t.jsx)(r.code,{children:"/foobar"}),". Optional parameters are only supported in a trailing position of the URI. In other words, you may not place an optional parameter in the middle of a route definition:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->get('user[/{name}]', function ($name = null) {\n    return $name;\n});\n"})}),"\n",(0,t.jsx)(r.h3,{id:"regular-expression-constraints",children:"Regular Expression Constraints"}),"\n",(0,t.jsx)(r.p,{children:"You may constrain the format of your route parameters by defining a regular expression in your route definition:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->get('user/{name:[A-Za-z]+}', function ($name) {\n    //\n});\n"})}),"\n",(0,t.jsx)(r.h2,{id:"named-routes",children:"Named Routes"}),"\n",(0,t.jsxs)(r.p,{children:["Named routes allow the convenient generation of URLs or redirects for specific routes. You may specify a name for a route using the ",(0,t.jsx)(r.code,{children:"as"})," array key when defining the route:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->get('profile', ['as' => 'profile', function () {\n    //\n}]);\n"})}),"\n",(0,t.jsx)(r.p,{children:"You may also specify route names for controller actions:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->get('profile', [\n    'as' => 'profile', 'uses' => 'UserController@showProfile'\n]);\n"})}),"\n",(0,t.jsx)(r.h4,{id:"generating-urls-to-named-routes",children:"Generating URLs To Named Routes"}),"\n",(0,t.jsxs)(r.p,{children:["Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via the global ",(0,t.jsx)(r.code,{children:"route"})," function:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"// Generating URLs...\n$url = route('profile');\n\n// Generating Redirects...\nreturn redirect()->route('profile');\n"})}),"\n",(0,t.jsxs)(r.p,{children:["If the named route defines parameters, you may pass the parameters as the second argument to the ",(0,t.jsx)(r.code,{children:"route"})," function. The given parameters will automatically be inserted into the URL in their correct positions:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->get('user/{id}/profile', ['as' => 'profile', function ($id) {\n    //\n}]);\n\n$url = route('profile', ['id' => 1]);\n"})}),"\n",(0,t.jsx)(r.h2,{id:"route-groups",children:"Route Groups"}),"\n",(0,t.jsxs)(r.p,{children:["Route groups allow you to share route attributes, such as middleware or namespaces, across a large number of routes without needing to define those attributes on each individual route. Shared attributes are specified in an array format as the first parameter to the ",(0,t.jsx)(r.code,{children:"$router->group"})," method."]}),"\n",(0,t.jsx)(r.p,{children:"To learn more about route groups, we'll walk through several common use-cases for the feature."}),"\n",(0,t.jsx)(r.h3,{id:"middleware",children:"Middleware"}),"\n",(0,t.jsxs)(r.p,{children:["To assign middleware to all routes within a group, you may use the ",(0,t.jsx)(r.code,{children:"middleware"})," key in the group attribute array. Middleware will be executed in the order you define this array:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->group(['middleware' => 'auth'], function () use ($router) {\n    $router->get('/', function () {\n        // Uses Auth Middleware\n    });\n\n    $router->get('user/profile', function () {\n        // Uses Auth Middleware\n    });\n});\n"})}),"\n",(0,t.jsx)(r.h3,{id:"namespaces",children:"Namespaces"}),"\n",(0,t.jsxs)(r.p,{children:["Another common use-case for route groups is assigning the same PHP namespace to a group of controllers. You may use the ",(0,t.jsx)(r.code,{children:"namespace"})," parameter in your group attribute array to specify the namespace for all controllers within the group:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->group(['namespace' => 'Admin'], function() use ($router)\n{\n    // Using The \"App\\Http\\Controllers\\Admin\" Namespace...\n\n    $router->group(['namespace' => 'User'], function() use ($router) {\n        // Using The \"App\\Http\\Controllers\\Admin\\User\" Namespace...\n    });\n});\n"})}),"\n",(0,t.jsx)(r.h3,{id:"route-prefixes",children:"Route Prefixes"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"prefix"})," group attribute may be used to prefix each route in the group with a given URI. For example, you may want to prefix all route URIs within the group with ",(0,t.jsx)(r.code,{children:"admin"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->group(['prefix' => 'admin'], function () use ($router) {\n    $router->get('users', function () {\n        // Matches The \"/admin/users\" URL\n    });\n});\n"})}),"\n",(0,t.jsxs)(r.p,{children:["You may also use the ",(0,t.jsx)(r.code,{children:"prefix"})," parameter to specify common parameters for your grouped routes:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-php",children:"$router->group(['prefix' => 'accounts/{accountId}'], function () use ($router) {\n    $router->get('detail', function ($accountId) {\n        // Matches The \"/accounts/{accountId}/detail\" URL\n    });\n});\n"})})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var o=n(6540);const t={},s=o.createContext(t);function a(e){const r=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);