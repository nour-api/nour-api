"use strict";(self.webpackChunknour_api_docs=self.webpackChunknour_api_docs||[]).push([[6953],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(6540);const t={},d=i.createContext(t);function a(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(d.Provider,{value:n},e.children)}},9328:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"middleware","title":"HTTP Middleware","description":"*   Introduction","source":"@site/docs/middleware.md","sourceDirName":".","slug":"/middleware","permalink":"/docs/middleware","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Routing","permalink":"/docs/routing"},"next":{"title":"HTTP Controllers","permalink":"/docs/controllers"}}');var t=r(4848),d=r(8453);const a={},l="HTTP Middleware",s={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Defining Middleware",id:"defining-middleware",level:2},{value:"<em>Before</em> / <em>After</em> Middleware",id:"before--after-middleware",level:3},{value:"Registering Middleware",id:"registering-middleware",level:2},{value:"Global Middleware",id:"global-middleware",level:3},{value:"Assigning Middleware To Routes",id:"assigning-middleware-to-routes",level:3},{value:"Middleware Parameters",id:"middleware-parameters",level:2},{value:"Terminable Middleware",id:"terminable-middleware",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"http-middleware",children:"HTTP Middleware"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#defining-middleware",children:"Defining Middleware"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#registering-middleware",children:"Registering Middleware"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#global-middleware",children:"Global Middleware"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#assigning-middleware-to-routes",children:"Assigning Middleware To Routes"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#middleware-parameters",children:"Middleware Parameters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#terminable-middleware",children:"Terminable Middleware"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"HTTP middleware provide a convenient mechanism for filtering HTTP requests entering your application. For example, Nour-API includes a middleware that verifies if the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to the login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application."}),"\n",(0,t.jsx)(n.p,{children:"Of course, additional middleware can be written to perform a variety of tasks besides authentication. A CORS middleware might be responsible for adding the proper headers to all responses leaving your application. A logging middleware might log all incoming requests to your application."}),"\n",(0,t.jsxs)(n.p,{children:["All middleware should be stored in the ",(0,t.jsx)(n.code,{children:"app/Http/Middleware"})," directory."]}),"\n",(0,t.jsx)(n.h2,{id:"defining-middleware",children:"Defining Middleware"}),"\n",(0,t.jsxs)(n.p,{children:["To create a new middleware, copy the ",(0,t.jsx)(n.code,{children:"ExampleMiddleware"})," that is included with the default Nour-API application. In our new middleware, we will only allow access to the route if the supplied ",(0,t.jsx)(n.code,{children:"age"}),' is greater than 200. Otherwise, we will redirect the users back to the "home" URI.']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass OldMiddleware\n{\n    /**\n     * Run the request filter.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        if ($request->input('age') <= 200) {\n            return redirect('home');\n        }\n\n        return $next($request);\n    }\n\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As you can see, if the given ",(0,t.jsx)(n.code,{children:"age"})," is less than or equal to ",(0,t.jsx)(n.code,{children:"200"}),', the middleware will return an HTTP redirect to the client; otherwise, the request will be passed further into the application. To pass the request deeper into the application (allowing the middleware to "pass"), simply call the ',(0,t.jsx)(n.code,{children:"$next"})," callback with the ",(0,t.jsx)(n.code,{children:"$request"}),"."]}),"\n",(0,t.jsx)(n.p,{children:'It\'s best to envision middleware as a series of "layers" HTTP requests must pass through before they hit your application. Each layer can examine the request and even reject it entirely.'}),"\n",(0,t.jsxs)(n.h3,{id:"before--after-middleware",children:[(0,t.jsx)(n.em,{children:"Before"})," / ",(0,t.jsx)(n.em,{children:"After"})," Middleware"]}),"\n",(0,t.jsxs)(n.p,{children:["Whether a middleware runs before or after a request depends on the middleware itself. For example, the following middleware would perform some task ",(0,t.jsx)(n.strong,{children:"before"})," the request is handled by the application:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass BeforeMiddleware\n{\n    public function handle($request, Closure $next)\n    {\n        // Perform action\n\n        return $next($request);\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["However, this middleware would perform its task ",(0,t.jsx)(n.strong,{children:"after"})," the request is handled by the application:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass AfterMiddleware\n{\n    public function handle($request, Closure $next)\n    {\n        $response = $next($request);\n\n        // Perform action\n\n        return $response;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"registering-middleware",children:"Registering Middleware"}),"\n",(0,t.jsx)(n.h3,{id:"global-middleware",children:"Global Middleware"}),"\n",(0,t.jsxs)(n.p,{children:["If you want a middleware to be run during every HTTP request to your application, simply list the middleware class in the call to the ",(0,t.jsx)(n.code,{children:"$app->middleware()"})," method in your ",(0,t.jsx)(n.code,{children:"bootstrap/app.php"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$app->middleware([\n   App\\Http\\Middleware\\OldMiddleware::class\n]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"assigning-middleware-to-routes",children:"Assigning Middleware To Routes"}),"\n",(0,t.jsxs)(n.p,{children:["If you would like to assign middleware to specific routes, you should first assign the middleware a short-hand key in ",(0,t.jsx)(n.code,{children:"bootstrap/app.php"})," file's call to the ",(0,t.jsx)(n.code,{children:"$app->routeMiddleware()"})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$app->routeMiddleware([\n    'auth' => App\\Http\\Middleware\\Authenticate::class,\n]);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once the middleware has been defined in the HTTP kernel, you may use the ",(0,t.jsx)(n.code,{children:"middleware"})," key in the route options array:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$router->get('admin/profile', ['middleware' => 'auth', function () {\n    //\n}]);\n"})}),"\n",(0,t.jsx)(n.p,{children:"You may use an array to assign multiple middleware to the route:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$router->get('/', ['middleware' => ['first', 'second'], function () {\n    //\n}]);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Or, when attaching the middleware to a controller route, using the ",(0,t.jsx)(n.code,{children:"uses"})," key to specify the controller action as a string:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$router->get('admin/profile', [\n    'middleware' => 'auth',\n    'uses' => 'AdminController@showProfile'\n]);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"middleware-parameters",children:"Middleware Parameters"}),"\n",(0,t.jsxs)(n.p,{children:['Middleware can also receive additional custom parameters. For example, if your application needs to verify that the authenticated user has a given "role" before performing a given action, you could create a ',(0,t.jsx)(n.code,{children:"RoleMiddleware"})," that receives a role name as an additional argument."]}),"\n",(0,t.jsxs)(n.p,{children:["Additional middleware parameters will be passed to the middleware after the ",(0,t.jsx)(n.code,{children:"$next"})," argument:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass RoleMiddleware\n{\n    /**\n     * Run the request filter.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @param  string  $role\n     * @return mixed\n     */\n    public function handle($request, Closure $next, $role)\n    {\n        if (! $request->user()->hasRole($role)) {\n            // Redirect...\n        }\n\n        return $next($request);\n    }\n\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Middleware parameters may be specified when defining the route by separating the middleware name and parameters with a ",(0,t.jsx)(n.code,{children:":"}),". Multiple parameters should be delimited by commas:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$router->put('post/{id}', ['middleware' => 'role:editor', function ($id) {\n    //\n}]);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"terminable-middleware",children:"Terminable Middleware"}),"\n",(0,t.jsxs)(n.p,{children:['Sometimes a middleware may need to do some work after the HTTP response has already been sent to the browser. For example, the "session" middleware writes the session data to storage ',(0,t.jsx)(n.em,{children:"after"}),' the response has been sent to the browser. To accomplish this, define the middleware as "terminable" by adding a ',(0,t.jsx)(n.code,{children:"terminate"})," method to the middleware:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace Illuminate\\Session\\Middleware;\n\nuse Closure;\n\nclass StartSession\n{\n    public function handle($request, Closure $next)\n    {\n        return $next($request);\n    }\n\n    public function terminate($request, $response)\n    {\n        // Store the session data...\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"terminate"})," method should receive both the request and the response. Once you have defined a terminable middleware, you should add it to the list of global middleware in your ",(0,t.jsx)(n.code,{children:"bootstrap/app.php"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:["When calling the ",(0,t.jsx)(n.code,{children:"terminate"})," method on your middleware, Nour-API will resolve a fresh instance of the middleware from the ",(0,t.jsx)(n.a,{href:"https://laravel.com/docs/container",children:"service container"}),". If you would like to use the same middleware instance when the ",(0,t.jsx)(n.code,{children:"handle"})," and ",(0,t.jsx)(n.code,{children:"terminate"})," methods are called, register the middleware with the container using the container's ",(0,t.jsx)(n.code,{children:"singleton"})," method."]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);