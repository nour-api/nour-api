"use strict";(self.webpackChunknour_api_docs=self.webpackChunknour_api_docs||[]).push([[5786],{7575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"requests","title":"HTTP Requests","description":"*   Accessing The Request","source":"@site/docs/requests.md","sourceDirName":".","slug":"/requests","permalink":"/docs/requests","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Controllers","permalink":"/docs/controllers"},"next":{"title":"HTTP Responses","permalink":"/docs/responses"}}');var i=t(4848),r=t(8453);const l={},a="HTTP Requests",o={},d=[{value:"Accessing The Request",id:"accessing-the-request",level:2},{value:"Basic Request Information",id:"basic-request-information",level:3},{value:"Retrieving The Request URI",id:"retrieving-the-request-uri",level:4},{value:"Retrieving The Request Method",id:"retrieving-the-request-method",level:4},{value:"PSR-7 Requests",id:"psr-7-requests",level:3},{value:"Retrieving Input",id:"retrieving-input",level:2},{value:"Retrieving An Input Value",id:"retrieving-an-input-value",level:4},{value:"Determining If An Input Value Is Present",id:"determining-if-an-input-value-is-present",level:4},{value:"Retrieving All Input Data",id:"retrieving-all-input-data",level:4},{value:"Retrieving A Portion Of The Input Data",id:"retrieving-a-portion-of-the-input-data",level:4},{value:"Files",id:"files",level:3},{value:"Retrieving Uploaded Files",id:"retrieving-uploaded-files",level:4},{value:"Validating Successful Uploads",id:"validating-successful-uploads",level:4},{value:"Moving Uploaded Files",id:"moving-uploaded-files",level:4},{value:"Other File Methods",id:"other-file-methods",level:4}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"http-requests",children:"HTTP Requests"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#accessing-the-request",children:"Accessing The Request"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#basic-request-information",children:"Basic Request Information"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#psr-7-requests",children:"PSR-7 Requests"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#retrieving-input",children:"Retrieving Input"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#files",children:"Files"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"accessing-the-request",children:"Accessing The Request"}),"\n",(0,i.jsxs)(n.p,{children:["To obtain an instance of the current HTTP request via dependency injection, you should type-hint the ",(0,i.jsx)(n.code,{children:"Illuminate\\Http\\Request"})," class on your controller constructor or method. The current request instance will automatically be injected by the ",(0,i.jsx)(n.a,{href:"https://laravel.com/docs/container",children:"service container"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass UserController extends Controller\n{\n    /**\n     * Store a new user.\n     *\n     * @param  Request  $request\n     * @return Response\n     */\n    public function store(Request $request)\n    {\n        $name = $request->input('name');\n\n        //\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If your controller method is also expecting input from a route parameter, simply list your route arguments after your other dependencies. For example, if your route is defined like so:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$router->put('user/{id}', 'UserController@update');\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You may still type-hint the ",(0,i.jsx)(n.code,{children:"Illuminate\\Http\\Request"})," and access your route parameter ",(0,i.jsx)(n.code,{children:"id"})," by defining your controller method like the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass UserController extends Controller\n{\n    /**\n     * Update the specified user.\n     *\n     * @param  Request  $request\n     * @param  string  $id\n     * @return Response\n     */\n    public function update(Request $request, $id)\n    {\n        //\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"basic-request-information",children:"Basic Request Information"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Illuminate\\Http\\Request"})," instance provides a variety of methods for examining the HTTP request for your application and extends the ",(0,i.jsx)(n.code,{children:"Symfony\\Component\\HttpFoundation\\Request"})," class. Here are a few more of the useful methods available on this class:"]}),"\n",(0,i.jsx)(n.h4,{id:"retrieving-the-request-uri",children:"Retrieving The Request URI"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"path"})," method returns the request's URI. So, if the incoming request is targeted at ",(0,i.jsx)(n.code,{children:"http://domain.com/foo/bar"}),", the ",(0,i.jsx)(n.code,{children:"path"})," method will return ",(0,i.jsx)(n.code,{children:"foo/bar"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$uri = $request->path();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"is"})," method allows you to verify that the incoming request URI matches a given pattern. You may use the ",(0,i.jsx)(n.code,{children:"*"})," character as a wildcard when utilizing this method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"if ($request->is('admin/*')) {\n    //\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To get the full URL, not just the path info, you may use the ",(0,i.jsx)(n.code,{children:"url"})," or ",(0,i.jsx)(n.code,{children:"fullUrl"})," methods on the request instance:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"// Without Query String...\n$url = $request->url();\n\n// With Query String...\n$url = $request->fullUrl();\n"})}),"\n",(0,i.jsx)(n.h4,{id:"retrieving-the-request-method",children:"Retrieving The Request Method"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"method"})," method will return the HTTP verb for the request. You may also use the ",(0,i.jsx)(n.code,{children:"isMethod"})," method to verify that the HTTP verb matches a given string:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$method = $request->method();\n\nif ($request->isMethod('post')) {\n    //\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"psr-7-requests",children:"PSR-7 Requests"}),"\n",(0,i.jsx)(n.p,{children:"The PSR-7 standard specifies interfaces for HTTP messages, including requests and responses. If you would like to obtain an instance of a PSR-7 request, you will first need to install a few libraries. Nour-API uses the Symfony HTTP Message Bridge component to convert typical Laravel requests and responses into PSR-7 compatible implementations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"composer require symfony/psr-http-message-bridge\n\ncomposer require zendframework/zend-diactoros\n"})}),"\n",(0,i.jsx)(n.p,{children:"Once you have installed these libraries, you may obtain a PSR-7 request by simply type-hinting the request type on your route or controller:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Psr\\Http\\Message\\ServerRequestInterface;\n\n$router->get('/', function (ServerRequestInterface $request) {\n    //\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you return a PSR-7 response instance from a route or controller, it will automatically be converted back to a Laravel response instance and be displayed by the framework."}),"\n",(0,i.jsx)(n.h2,{id:"retrieving-input",children:"Retrieving Input"}),"\n",(0,i.jsx)(n.h4,{id:"retrieving-an-input-value",children:"Retrieving An Input Value"}),"\n",(0,i.jsxs)(n.p,{children:["Using a few simple methods, you may access all user input from your ",(0,i.jsx)(n.code,{children:"Illuminate\\Http\\Request"})," instance. You do not need to worry about the HTTP verb used for the request, as input is accessed in the same way for all verbs:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$name = $request->input('name');\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You may pass a default value as the second argument to the ",(0,i.jsx)(n.code,{children:"input"})," method. This value will be returned if the requested input value is not present on the request:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$name = $request->input('name', 'Sally');\n"})}),"\n",(0,i.jsx)(n.p,{children:'When working on forms with array inputs, you may use "dot" notation to access the arrays:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$name = $request->input('products.0.name');\n\n$names = $request->input('products.*.name');\n"})}),"\n",(0,i.jsx)(n.h4,{id:"determining-if-an-input-value-is-present",children:"Determining If An Input Value Is Present"}),"\n",(0,i.jsxs)(n.p,{children:["You should use the ",(0,i.jsx)(n.code,{children:"has"})," method to determine if a value is present on the request. The ",(0,i.jsx)(n.code,{children:"has"})," method returns ",(0,i.jsx)(n.code,{children:"true"})," if the value is present on the request:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"if ($request->has('name')) {\n    //\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When given an array, the ",(0,i.jsx)(n.code,{children:"has"})," method will determine if all of the specified values are present:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"if ($request->has(['name', 'email'])) {\n    //\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you would like to determine if a value is present on the request and is not empty, you may use the ",(0,i.jsx)(n.code,{children:"filled"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"if ($request->filled('name')) {\n    //\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"retrieving-all-input-data",children:"Retrieving All Input Data"}),"\n",(0,i.jsxs)(n.p,{children:["You may also retrieve all of the input data as an ",(0,i.jsx)(n.code,{children:"array"})," using the ",(0,i.jsx)(n.code,{children:"all"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$input = $request->all();\n"})}),"\n",(0,i.jsx)(n.h4,{id:"retrieving-a-portion-of-the-input-data",children:"Retrieving A Portion Of The Input Data"}),"\n",(0,i.jsxs)(n.p,{children:["If you need to retrieve a sub-set of the input data, you may use the ",(0,i.jsx)(n.code,{children:"only"})," and ",(0,i.jsx)(n.code,{children:"except"})," methods. Both of these methods will accept a single ",(0,i.jsx)(n.code,{children:"array"})," or a dynamic list of arguments:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$input = $request->only(['username', 'password']);\n\n$input = $request->only('username', 'password');\n\n$input = $request->except(['credit_card']);\n\n$input = $request->except('credit_card');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"files",children:"Files"}),"\n",(0,i.jsx)(n.h4,{id:"retrieving-uploaded-files",children:"Retrieving Uploaded Files"}),"\n",(0,i.jsxs)(n.p,{children:["You may access uploaded files that are included with the ",(0,i.jsx)(n.code,{children:"Illuminate\\Http\\Request"})," instance using the ",(0,i.jsx)(n.code,{children:"file"})," method. The object returned by the ",(0,i.jsx)(n.code,{children:"file"})," method is an instance of the ",(0,i.jsx)(n.code,{children:"Symfony\\Component\\HttpFoundation\\File\\UploadedFile"})," class, which extends the PHP ",(0,i.jsx)(n.code,{children:"SplFileInfo"})," class and provides a variety of methods for interacting with the file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$file = $request->file('photo');\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You may determine if a file is present on the request using the ",(0,i.jsx)(n.code,{children:"hasFile"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"if ($request->hasFile('photo')) {\n    //\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"validating-successful-uploads",children:"Validating Successful Uploads"}),"\n",(0,i.jsxs)(n.p,{children:["In addition to checking if the file is present, you may verify that there were no problems uploading the file via the ",(0,i.jsx)(n.code,{children:"isValid"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"if ($request->file('photo')->isValid()) {\n    //\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"moving-uploaded-files",children:"Moving Uploaded Files"}),"\n",(0,i.jsxs)(n.p,{children:["To move the uploaded file to a new location, you should use the ",(0,i.jsx)(n.code,{children:"move"})," method. This method will move the file from its temporary upload location (as determined by your PHP configuration) to a more permanent destination of your choosing:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$request->file('photo')->move($destinationPath);\n\n$request->file('photo')->move($destinationPath, $fileName);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"other-file-methods",children:"Other File Methods"}),"\n",(0,i.jsxs)(n.p,{children:["There are a variety of other methods available on ",(0,i.jsx)(n.code,{children:"UploadedFile"})," instances. Check out the ",(0,i.jsx)(n.a,{href:"https://api.symfony.com/3.0/Symfony/Component/HttpFoundation/File/UploadedFile.html",children:"API documentation for the class"})," for more information regarding these methods."]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);