"use strict";(self.webpackChunknour_api_docs=self.webpackChunknour_api_docs||[]).push([[3873],{8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var o=i(6540);const r={},t=o.createContext(r);function a(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(t.Provider,{value:n},e.children)}},8633:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"configuration","title":"Configuration","description":"*   Introduction","source":"@site/docs/configuration.md","sourceDirName":".","slug":"/configuration","permalink":"/v2/docs/configuration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/v2/docs/installation"},"next":{"title":"Release Notes","permalink":"/v2/docs/releases"}}');var r=i(4848),t=i(8453);const a={},s="Configuration",c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Accessing Configuration Values",id:"accessing-configuration-values",level:2},{value:"Environment Configuration",id:"environment-configuration",level:2},{value:"Determining The Current Environment",id:"determining-the-current-environment",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#accessing-configuration-values",children:"Accessing Configuration Values"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#environment-configuration",children:"Environment Configuration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#determining-the-current-environment",children:"Determining The Current Environment"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["All of the configuration options for the Nour-API framework are stored in the ",(0,r.jsx)(n.code,{children:".env"})," file."]}),"\n",(0,r.jsx)(n.h2,{id:"accessing-configuration-values",children:"Accessing Configuration Values"}),"\n",(0,r.jsxs)(n.p,{children:["You may easily access your configuration values using the global ",(0,r.jsx)(n.code,{children:"config"}),' helper function from anywhere in your application. The configuration values may be accessed using "dot" syntax, which includes the name of the file and option you wish to access. A default value may also be specified and will be returned if the configuration option does not exist:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$value = config('app.locale');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To set configuration values at runtime, pass an array to the ",(0,r.jsx)(n.code,{children:"config"})," helper:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"config(['app.locale' => 'en']);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Before a configuration file can be used, you should load it into the application using the ",(0,r.jsx)(n.code,{children:"configure"})," method. This may be done within your ",(0,r.jsx)(n.code,{children:"bootstrap/app.php"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$app->configure('app');\n"})}),"\n",(0,r.jsx)(n.h2,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,r.jsx)(n.p,{children:"It is often helpful to have different configuration values based on the environment the application is running in. For example, you may wish to use a different cache driver locally than you do on your production server. It's easy using environment based configuration."}),"\n",(0,r.jsxs)(n.p,{children:["To make this a cinch, Nour-API utilizes the ",(0,r.jsx)(n.a,{href:"https://github.com/vlucas/phpdotenv",children:"DotEnv"})," PHP library by Vance Lucas. In a fresh Nour-API installation, the root directory of your application will contain a ",(0,r.jsx)(n.code,{children:".env.example"})," file. You should rename the ",(0,r.jsx)(n.code,{children:".env.example"})," file to ",(0,r.jsx)(n.code,{children:".env"})," when creating your application."]}),"\n",(0,r.jsxs)(n.p,{children:["All of the variables listed in this file will be loaded into the ",(0,r.jsx)(n.code,{children:"$_ENV"})," PHP super-global when your application receives a request. The ",(0,r.jsx)(n.code,{children:"env"})," function may be used to retrieve the values of your environment variables:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$debug = env('APP_DEBUG', true);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The second value passed to the ",(0,r.jsx)(n.code,{children:"env"}),' function is the "default value". This value will be used if no environment variable exists for the given key.']}),"\n",(0,r.jsxs)(n.p,{children:["Your ",(0,r.jsx)(n.code,{children:".env"})," file should not be committed to your application's source control, since each developer / server using your application could require a different environment configuration."]}),"\n",(0,r.jsxs)(n.p,{children:["If you are developing with a team, you may wish to continue including a ",(0,r.jsx)(n.code,{children:".env.example"})," file with your application. By putting place-holder values in the example configuration file, other developers on your team can clearly see which environment variables are needed to run your application."]}),"\n",(0,r.jsx)(n.h3,{id:"determining-the-current-environment",children:"Determining The Current Environment"}),"\n",(0,r.jsxs)(n.p,{children:["The current application environment is determined via the ",(0,r.jsx)(n.code,{children:"APP_ENV"})," variable from your ",(0,r.jsx)(n.code,{children:".env"})," file. You may access this value via the ",(0,r.jsx)(n.code,{children:"environment"})," method on the application instance:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$environment = app()->environment();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You may also pass arguments to the ",(0,r.jsx)(n.code,{children:"environment"})," method to check if the environment matches a given value. If necessary, you may even pass multiple values to the ",(0,r.jsx)(n.code,{children:"environment"})," method. If the environment matches any of the given values, the method will return ",(0,r.jsx)(n.code,{children:"true"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if (app()->environment('local')) {\n    // The environment is local\n}\n\nif (app()->environment('local', 'staging')) {\n    // The environment is either local OR staging...\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);